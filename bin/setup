#!/usr/bin/env ruby

require "fileutils"
include FileUtils

begin
  require "highline"
rescue LoadError
  false
end

def setup!
  within_project_root do
    puts "Ruby version of project: #{ruby_version}\n"
    # verify_ruby_version

    puts "\n== Installing Dependencies =="
    run "gem install bundler --no-document --conservative"
    run "bundle install"

    # unless File.exist?('config/database.yml')
    #   puts "\n== Copying Example Files =="
    #   copy 'config/database.yml.example', 'config/database.yml'
    # end

    puts "\n== Preparing Database =="
    run "bin/rails db:prepare"

    puts "\n== Removing Old Logs And Tempfiles =="
    run "bin/rails log:clear tmp:clear"

    puts "\n Everything is ready to use ✌"
  end
end

def within_project_root(&block)
  Dir.chdir(File.expand_path("../..", __FILE__), &block)
end

# def verify_ruby_version
#   log(:yellow, "Verification of Ruby version") do
#     unless `#{"ruby -v"}`.include?(ruby_version)
#       print_error("You need to install Ruby #{ruby_version} before proceeding")
#     end
#   end
# end

def ruby_version
  @ruby_version ||= IO.read(".ruby-version").strip
end

def run(command)
  log(:blue, "run  #{command}") do
    shell = "#{command} > /dev/null"
    with_clean_bundler_env do
      system(shell) or print_error("#{command} exited with non-zero status")
    end
  end
end

def with_clean_bundler_env(&block)
  return block.call unless defined?(Bundler)
  Bundler.with_clean_env(&block)
end

def copy(example_path, copy_path)
  log(:magenta, "copy #{example_path} → #{copy_path}") do
    FileUtils.cp(example_path, copy_path)
  end
end

def log(color, message, out=$stdout, &block)
  if defined?(HighLine::String)
    message.sub!(/^(\S*)/) { HighLine::String.new($1).public_send(color) }
  end

  if block_given?
    out.print("#{message} … ")
    yield
    log(:green, "✔️")
  else
    out.puts(message)
  end
end

def print_error(message)
  puts
  log(:red, "FAIL #{message}", $stderr)
  exit(1)
end

setup!